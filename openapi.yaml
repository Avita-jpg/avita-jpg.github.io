openapi: '3.0.2'
info:
  title: Realindera API
  version: '1.0'
  description: > 
    REST API para administración interna de créditos para Realindera.
servers:
  - url: https://api.server.test/v1
  - url: https://localhost:5000
  - url: http://127.0.0.1:5000
tags:
  - name: Equipos
  - name: Clientes
  - name: Codigos
paths:
  /equipos/{idEquipo}/cliente:
    get:
      tags: 
        - Equipos
      summary: Obtener id de cliente asociado al equipo.
      description: >
       Obtener el id del cliente asociado al equipo. Permite verificar que el equipo tiene permiso de usar Realindera y en respuesta envía id de cliente para utilizar en futuras solicitudes.
      parameters:
        - name: idEquipo
          in: path
          required: true
          schema: 
            $ref: "#/components/schemas/idEquipo"
          description: sha256 hash generado a partir de UUID de la maquina.
        
      responses:
        '200':
          description: OK - El equipo está autorizado
          content:
            application/json:
              schema:
                type: object
                properties: 
                  idCliente:
                    $ref: "#/components/schemas/idCliente"
                
        '404':
          $ref: "#/components/responses/404"
  /equipos/{idEquipo}/ultimoCodigo:
    post:
      tags:
        - Equipos
      summary: Actualizar el valor de "ultimoCodigo".
      description: > 
        Actualizar el valor de \"ultimoCodigo\" del equipo especificado en la base de datos.
      parameters:
        - name: idEquipo
          in: path
          required: true
          schema: 
            $ref: "#/components/schemas/idEquipo"
          description: sha256 hash generado a partir de UUID de la maquina.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                ultimoCodigo:
                  type: string
                  example: 9da58969075bb01eae28df35e69abee427732701c2e2942d93e3ca51c6671368
      responses:
        '200':
          description: OK
        '404':
          $ref: "#/components/responses/404"
  
  /clientes/{idCliente}/{campo}:
    get:
      tags: 
        - Clientes
      summary: Obtener el valor de un campo de un cliente especifico.
      description: |
        Obtener el valor de cualquier campo (disponible en lectura) en un documento de cliente en la base de datos.
      parameters:
        - name: idCliente
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/idCliente"
        - $ref: "#/components/parameters/campo"
      responses:
        '200':
          description: OK
          content: 
            application/json:
              schema:
                type: object
                properties:
                  campo:
                    example: "ejemplo"
              example: {"creditosDisponibles": 237}
        '404':
          description: Not found - El recurso o el cliente no existe en la base de datos
        
  /codigos/{idEquipo}:
    get: 
      tags: 
        - Codigos
      summary: Solicitar una lista nueva de codigos.
      description: > 
        Solicitar una nueva lista de codigos y poner el primer codigo de la lista (no es valido como credito) en "ultimoCodigo" en el documento de equipo en la base de datos.
      parameters: 
        - name: idEquipo
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/idEquipo"
      responses:
        '200':
          description: OK - lista en respuesta
          content:
            application/json:
              schema:
                type: object
                properties:
                  lista_codigos:
                    type: array
                    items:
                      type: string
                example: { "lista_codigos": [ 67fd4b7766e03c2c1770cf2a374066a8d1df41eb21b4f3a0822cf063b8d74b1b,
                  d014b614b3dcd219966848ece3bb5ee3a3c5b3efe2e85c097bd3552c2b26c4be,
                  9da58969075bb01eae28df35e69abee427732701c2e2942d93e3ca51c6671368,
                  cfc97b67b3af54d852bbcdb4574d604b8befc804b050fcac8d1f584b4a7199ff,
                  d1a0f7ad3f3ef6a526db2c3e92829dcbc3c99aca7edfdc524d4ffa6a5a249e03]}
        '404':
          $ref: "#/components/responses/404"
components:
  parameters:
    campo: 
      name: campo
      in: path
      required: true
      schema:
        type: string
        enum:
          - nombreUsuario
          - email
          - fechaDeCreacion
          - creditosDisponibles
          - historialDeCompras
      description: >
          Un campo accesible en lectura de un documento de la coleccion 'clientes'.
    campo_rw:
      name: campo_rw
      in: path
      required: true
      schema:
        type: string
        enum:
          - nombreUsuario
          - email
          - ultimoCodigo
      description: >
          Un campo accesible en lectura y escritura de un documento de la coleccion 'clientes'.
  schemas:
    idEquipo:    
      type: string
      description: sha256 hash generado a partir de UUID de la maquina. Es un atributo de Equipo
      example: 2289f5cc00044e1c86b2c7cceffcfd4ba07993cbb9bdc2a840e464c53b7bf3a7
    
    idCliente:
      type: string
      description: > 
        Representacion en string del ObjectId que permite identificar 
        al cliente en la base de datos.
      example: 64f20fd08ff77564c633840e
  responses:
      '200':
        description: OK
      '400':
        description: Bad request
      '404':
        description: Not found - El recurso no existe en la base de datos
      '500':
        description: Internal server error - Error del servidor
